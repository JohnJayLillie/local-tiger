// tiger-api/src/index.js - Main Entry Point (Reduced to ~100 lines)
import express from 'express';
import cors from 'cors';
import { authRoutes } from './routes/auth.js';
import { videoRoutes } from './routes/video.js';
import { scriptRoutes } from './routes/script.js';
import { imageRoutes } from './routes/image.js';
import { aiRoutes } from './routes/ai.js';
import { complianceRoutes } from './routes/compliance.js';
import { analyticsRoutes } from './routes/analytics.js';
import { userRoutes } from './routes/user.js';
import { errorHandler } from './middleware/errorHandler.js';
import { rateLimiter } from './middleware/rateLimiter.js';
import { logger } from './utils/logger.js';
import { initializeDatabase } from './config/database.js';

const app = express();
const PORT = process.env.PORT || 8000;

// Initialize middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(rateLimiter);

// Initialize database
await initializeDatabase();

// Route mounting
app.use('/api/auth', authRoutes);
app.use('/api/video', videoRoutes);
app.use('/api/script', scriptRoutes);
app.use('/api/image', imageRoutes);
app.use('/api/ai', aiRoutes);
app.use('/api/compliance', complianceRoutes);
app.use('/api/analytics', analyticsRoutes);
app.use('/api/user', userRoutes);

// Health check
app.get('/health', (req, res) => res.json({ status: 'healthy', timestamp: new Date().toISOString() }));

// Error handling
app.use(errorHandler);

app.listen(PORT, () => {
  logger.info(`Tiger Platform API running on port ${PORT}`);
});

// ================================================================
// PROPOSED DIRECTORY STRUCTURE:
// ================================================================
/*
src/
â”œâ”€â”€ index.js                 (Main entry - THIS FILE - ~100 lines)
â”œâ”€â”€ config/
â”‚   â”œâ”€â”€ database.js         (Database configuration)
â”‚   â”œâ”€â”€ ai-services.js      (AI API configurations)
â”‚   â””â”€â”€ storage.js          (File storage configuration)
â”œâ”€â”€ routes/
â”‚   â”œâ”€â”€ auth.js            (Authentication routes)
â”‚   â”œâ”€â”€ video.js           (Video generation routes)
â”‚   â”œâ”€â”€ script.js          (Script generation routes)
â”‚   â”œâ”€â”€ image.js           (Image generation/download routes)
â”‚   â”œâ”€â”€ ai.js              (AI coaching/prompt routes)
â”‚   â”œâ”€â”€ compliance.js      (Legal compliance routes)
â”‚   â”œâ”€â”€ analytics.js       (Analytics routes)
â”‚   â””â”€â”€ user.js            (User management routes)
â”œâ”€â”€ controllers/
â”‚   â”œâ”€â”€ VideoController.js
â”‚   â”œâ”€â”€ ScriptController.js
â”‚   â”œâ”€â”€ ImageController.js
â”‚   â”œâ”€â”€ AIController.js
â”‚   â”œâ”€â”€ ComplianceController.js
â”‚   â””â”€â”€ UserController.js
â”œâ”€â”€ services/
â”‚   â”œâ”€â”€ video/
â”‚   â”‚   â”œâ”€â”€ RunwayService.js
â”‚   â”‚   â”œâ”€â”€ StableDiffusionService.js
â”‚   â”‚   â””â”€â”€ VideoProcessor.js
â”‚   â”œâ”€â”€ ai/
â”‚   â”‚   â”œâ”€â”€ OpenAIService.js
â”‚   â”‚   â”œâ”€â”€ AnthropicService.js
â”‚   â”‚   â””â”€â”€ PromptOptimizer.js
â”‚   â”œâ”€â”€ image/
â”‚   â”‚   â”œâ”€â”€ DalleService.js
â”‚   â”‚   â”œâ”€â”€ ImageProcessor.js
â”‚   â”‚   â””â”€â”€ PolaroidFilter.js
â”‚   â””â”€â”€ script/
â”‚       â”œâ”€â”€ ScriptGenerator.js
â”‚       â”œâ”€â”€ AudioProcessor.js
â”‚       â””â”€â”€ ContentOptimizer.js
â”œâ”€â”€ middleware/
â”‚   â”œâ”€â”€ auth.js
â”‚   â”œâ”€â”€ rateLimiter.js
â”‚   â”œâ”€â”€ errorHandler.js
â”‚   â”œâ”€â”€ fileUpload.js
â”‚   â””â”€â”€ validation.js
â”œâ”€â”€ models/
â”‚   â”œâ”€â”€ User.js
â”‚   â”œâ”€â”€ Project.js
â”‚   â”œâ”€â”€ Script.js
â”‚   â””â”€â”€ Asset.js
â”œâ”€â”€ utils/
â”‚   â”œâ”€â”€ logger.js
â”‚   â”œâ”€â”€ fileHandler.js
â”‚   â”œâ”€â”€ helpers.js
â”‚   â””â”€â”€ constants.js
â””â”€â”€ tests/
    â”œâ”€â”€ unit/
    â”œâ”€â”€ integration/
    â””â”€â”€ e2e/
*/

// BENEFITS OF THIS MODULAR APPROACH:
/*
1. ðŸŽ¯ MAINTAINABILITY
   - Each file has a single responsibility
   - Easy to locate and fix bugs
   - Clear code organization

2. ðŸš€ PERFORMANCE
   - Faster startup time (only load what's needed)
   - Better memory usage
   - Improved caching strategies

3. ðŸ‘¥ TEAM COLLABORATION
   - Multiple developers can work simultaneously
   - Clear ownership of components
   - Easier code reviews

4. ðŸ§ª TESTING
   - Unit tests for individual components
   - Mock services easily
   - Isolated testing environments

5. ðŸ“ˆ SCALABILITY
   - Add new features without touching existing code
   - Microservices-ready architecture
   - Easy to deploy individual components
*/